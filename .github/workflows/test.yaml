name: Run edge operator test case

concurrency:
  group: test-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    ## For update codecov.io
    branches:
      - main


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19.3'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19.3'
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: install kubebuilder
        run: |
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m | sed 's/x86_64/amd64/')
          curl -fsL "https://storage.googleapis.com/kubebuilder-tools/kubebuilder-tools-1.16.4-${OS}-${ARCH}.tar.gz" -o kubebuilder-tools
          tar -zxvf kubebuilder-tools
          sudo mv kubebuilder/ /usr/local/kubebuilder
      - name: Run unit tests
        run: make test
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./cover.out # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

  deployment:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        file:
          - "config/samples/edge_v1alpha1_ekuiper.yaml"
          - "config/samples/edge_v1alpha1_neuron.yaml"
          - "config/samples/edge_v1alpha1_neuronex.yaml"

    steps:
      - run: minikube start
      - name: install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --set installCRDs=true
      - uses: actions/setup-go@v3
        with:
          go-version: '1.19.3'
      - uses: actions/checkout@v3
      - name: Build image
        env:
          IMG: "emqx/edge-operator-controller:${{ github.sha }}"
        run: eval $(minikube docker-env) && docker build -t $IMG .
      - name: Deploy controller
        env:
          IMG: "emqx/edge-operator-controller:${{ github.sha }}"
        run: |
          make install
          make deploy
      - run: kubectl wait --for=condition=Ready pods -l "edge.emqx.io/name=edge-operator" -n edge-operator-system --timeout=60s
      - name: Get metadata
        id: meta
        run: |
          name=$(yq '.metadata.name' ${{ matrix.file }})
          echo "name=${name}" >> $GITHUB_OUTPUT
          kind=$(yq '.kind' ${{ matrix.file }})
          echo "kind=${kind}" >> $GITHUB_OUTPUT
      - run: kubectl apply -f ${{ matrix.file }}
      - name: Check CR status
        timeout-minutes: 1
        run: |
          while
            phase="$(kubectl get ${{ steps.meta.outputs.kind }} ${{ steps.meta.outputs.name }} -o jsonpath='{.status.phase}')"
            [[ ${phase} != "Running" ]]
          do
            kubectl get deployment -l "app.kubernetes.io/instance=${{ steps.meta.outputs.name }}"
            sleep 1
          done
      - name: Check deployment doesn't update
        run: |
          generation=$(kubectl get deployment -l "app.kubernetes.io/instance=${{ steps.meta.outputs.name }}" -o 'jsonpath={.items[0].status.observedGeneration}')
          if [ $generation != 1 ]; then
            kubectl get deployment -l "app.kubernetes.io/instance=${{ steps.meta.outputs.name }}" -o json
            exit 1;
          fi
      - if: always()
        run: kubectl logs -l "edge.emqx.io/name=edge-operator" -n edge-operator-system -c manager --tail=100
      - if: failure()
        run: kubectl get pod -l "app.kubernetes.io/instance=${{ steps.meta.outputs.name }}" -o json